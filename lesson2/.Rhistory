aes(x=rf_pred_proba))+
geom_histogram(binwidth=0.05)+
scale_x_continuous(breaks =seq(0,1,0.1),limits = c(0, 1)) +
xlab('test11,ba_over1 model predict proba histogram')
library(ggplot2)
ggplot(data=test11_bachange_pos_pred,
aes(x=rf_pred_proba))+
geom_histogram(binwidth=0.05)+
scale_x_continuous(breaks =seq(0,1,0.1),limits = c(0, 1)) +
xlab('test11,ba_over1 model predict proba histogram')
library(ggplot2)
ggplot(data=test11_bachange_pos_pred,
aes(x=rf_pred_proba))+
geom_histogram(binwidth=0.05)+
scale_x_continuous(breaks =seq(0,1,0.1),limits = c(0, 1)) +
xlab('test11,ba_over1 model predict proba histogram')
library(ggplot2)
ggplot(data=test11_bachange_pos_pred,
aes(x=rf_pred_proba))+
geom_histogram(binwidth=0.05)+
scale_x_continuous(breaks =seq(0,1,0.1),limits = c(0, 1)) +
xlab('test11,ba_over1 model predict proba histogram')
all_exac_tcga=read.csv('exac_tcga_all_ligand.csv')
dim(all_exac_tcga)
exac=read.csv('exac_germline_ligand.csv')
dim(exac)
tcga==read.csv('tcga_somatic_ligand.csv')
all_exac_tcga=read.csv('exac_tcga_all_ligand.csv')
dim(all_exac_tcga)
exac=read.csv('exac_germline_ligand.csv')
dim(exac)
tcga=read.csv('tcga_somatic_ligand.csv')
dim(tcga)
all_exac_tcga=read.csv('exac_tcga_all_ligand.csv')
dim(all_exac_tcga)
exac=read.csv('exac_germline_ligand.csv')
dim(exac)
tcga=read.csv('tcga_somatic_ligand.csv')
dim(tcga)
head(all_exac_tcga)
head(all_exac_tcga,2)
library(ggplot2)
ggplot(tcga,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
library(dplyr)
all_exac_tcga=read.csv('exac_tcga_all_ligand.csv')
all_exac_tcga1=filter(all_exac_tcga,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
dim(all_exac_tcga)
exac=read.csv('exac_germline_ligand.csv')
dim(exac)
exac1=filter(exac,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
tcga=read.csv('tcga_somatic_ligand.csv')
dim(tcga)
tcga1=filter(tcga,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
library(dplyr)
all_exac_tcga=read.csv('exac_tcga_all_ligand.csv')
all_exac_tcga1=filter(all_exac_tcga,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
dim(all_exac_tcga)
exac=read.csv('exac_germline_ligand.csv')
dim(exac)
exac1=filter(exac,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
tcga=read.csv('tcga_somatic_ligand.csv')
dim(tcga)
tcga1=filter(tcga,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
library(dplyr)
all_exac_tcga=read.csv('exac_tcga_all_ligand.csv')
all_exac_tcga1=filter(all_exac_tcga,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
dim(all_exac_tcga)
dim(all_exac_tcga)
exac=read.csv('exac_germline_ligand.csv')
exac1=filter(exac,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
dim(exac)
dim(exac1)
tcga=read.csv('tcga_somatic_ligand.csv')
tcga1=filter(tcga,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
dim(tcga)
dim(tcga1)
library(dplyr)
all_exac_tcga=read.csv('exac_tcga_all_ligand.csv')
all_exac_tcga1=filter(all_exac_tcga,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
dim(all_exac_tcga)
dim(all_exac_tcga1)
exac=read.csv('exac_germline_ligand.csv')
exac1=filter(exac,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
dim(exac)
dim(exac1)
tcga=read.csv('tcga_somatic_ligand.csv')
tcga1=filter(tcga,
binding_affinity_score_change!=0,
binding_affinity_score_change<1)
dim(tcga)
dim(tcga1)
library(ggplot2)
ggplot(tcga1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
library(ggplot2)
common_rare<-ggplot(tcga1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
library(ggplot2)
library(gridExtra)
common_rare<-ggplot(exac1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
driver_passenger<-ggplot(tcga1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
grid.arrange(common_rare,driver_passenger,ncol=1)
library(ggplot2)
library(gridExtra)
common_rare<-ggplot(exac1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
driver_passenger<-ggplot(tcga1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
grid.arrange(common_rare,driver_passenger,nrow=1)
library(ggplot2)
library(gridExtra)
common_rare<-ggplot(exac1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
driver_passenger<-ggplot(tcga1,
aes(x=driver_passenger,y=binding_affinity_score_change)) +
geom_boxplot()
grid.arrange(common_rare,driver_passenger,nrow=1)
library(ggplot2)
library(gridExtra)
common_rare<-ggplot(exac1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
driver_passenger<-ggplot(tcga1,
aes(x=driver_passenger,y=binding_affinity_score_change)) +
geom_boxplot()
grid.arrange(common_rare,driver_passenger,nrow=1)
library(ggplot2)
library(gridExtra)
common_rare<-ggplot(exac1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
driver_passenger<-ggplot(tcga1,
aes(x=driver_passenger,y=binding_affinity_score_change)) +
geom_boxplot()
grid.arrange(common_rare,driver_passenger,ncol=1)
library(ggplot2)
common_rare<-ggplot(exac1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
driver_passenger<-ggplot(tcga1,
aes(x=driver_passenger,y=binding_affinity_score_change)) +
geom_boxplot()
library(ggplot2)
common_rare<-ggplot(exac1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
library(ggplot2)
common_rare<-ggplot(exac1,
aes(x=af_class,y=binding_affinity_score_change)) +
geom_boxplot()
common_rare
driver_passenger<-ggplot(tcga1,
aes(x=driver_passenger,y=binding_affinity_score_change)) +
geom_boxplot()
driver_passenger
getwd()
setwd('/Users/henry/Desktop/data_science/Data_Analysis_with_R_udacity/lesson3')
pf<-read.csv("pseudo_facebook.tsv",sep='\t')
library(ggplot2)
library(dplyr)
clear
getwd()
list.files()
pf<-read.csv('pseudo_facebook.tsv',sep='\t')
dim(pf)
names(pf)
head(pf,5)
library(ggplot2)
names(pf)
summary(pf$dob_day)
qplot(x=dob_day,data=pf,binwidth=2)+
scale_x_continuous(breaks=1:31)
ggplot(aes(x = dob_day), data = pf) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = 1:31)
qplot(x=dob_day,data=pf,binwidth=1)+
scale_x_continuous(breaks=1:31)+
facet_wrap(~dob_month,ncol=4)
ggplot(aes(x = dob_day), data = pf) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = 1:31)+
facet_wrap(~dob_month,ncol=3)
str(pf)
ggplot(aes(x=friend_count),data=pf)+
geom_histogram(binwidth=100)
# What code would you add to create a facet the histogram by gender?
# Add it to the code below.
qplot(x = friend_count, data = pf, binwidth = 10) +
scale_x_continuous(limits = c(0, 1000),breaks = seq(0, 1000, 50))+
facet_wrap(~gender)
ggplot(aes(x = friend_count), data = pf) +
geom_histogram() +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_grid(gender~.)
# recodes rating to 1,3,5 and associates
# 5=large, 3=medium, 1=small internally
# R now treats rating as ordinal
rating<-c(rep("large",3),rep("small",1),rep("medium",3))
table(rating)
#map small to 1, medium to 3, large to 5
rating<-ordered(rating,levels=c("small","medium","large"))
table(rating)
levels(rating)
str(rating)
length(rating) # number of elements or components
str(rating)    # structure of an object
class(rating)  # class or type of an object
names(rating)
current_obj=ls()# list current objects
str(current_obj)
rm(list=ls()) # delete all object-global environment
ls()
length(rating) # number of elements or components
# recodes rating to 1,3,5 and associates
# 5=large, 3=medium, 1=small internally
# R now treats rating as ordinal
rating<-c(rep("large",3),rep("small",1),rep("medium",3))
table(rating)
#map small to 1, medium to 3, large to 5
rating<-ordered(rating,levels=c("small","medium","large"))
table(rating)
levels(rating)
str(rating)
# recodes rating to 1,3,5 and associates
# 5=large, 3=medium, 1=small internally
# R now treats rating as ordinal
rating<-c(rep("large",3),rep("small",1),rep("medium",3))
table(rating)
#map small to 1, medium to 3, large to 5
rating<-ordered(rating,levels=c("small","medium","large"))
table(rating)
levels(rating)
str(rating)
length(rating) # number of elements or components
str(rating)    # structure of an object
class(rating)  # class or type of an object
names(rating)
current_obj=ls()# list current objects
str(current_obj)
length(rating) # number of elements or components
str(rating)    # structure of an object
class(rating)  # class or type of an object
names(rating)
current_obj=ls()# list current objects
str(current_obj)
?cars
str(cars)
# The hash or pound symbol inside the r block creates
# a comment. These three lines of are not code and
# cannot be # executed.
x <- 1:10
mean(x)
summary(mtcars)
str(mtcars)
dim(mtcars)
efficient<-subset(mtcars,mpg>=23)
dim(efficient)
lt23<-mtcars[mtcars$mpg>=23,]
dim(lt23)
efficient<-subset(mtcars,mpg>=23,cyl == 4)
efficient<-subset(mtcars,mpg>=23,cyl == 4)
head(efficient)
efficient<-subset(mtcars,mpg>=23,gear == 4)
head(efficient)
efficient<-subset(mtcars,mpg>=23,gear == 4)
efficient
efficient<-subset(mtcars,mpg>=23)
efficient
dim(efficient)
lt23<-mtcars[mtcars$mpg>=23,]
dim(lt23)
dim(efficient)
lt23<-mtcars[mtcars$mpg>=23,]
dim(lt23)
subset(mtcars, mpg > 30 & hp > 100)
mtcars[mtcars$mpg>30&mtcars$hp>100,]
efficient<-subset(mtcars,mpg>=23, vs==1)
efficient
efficient<-subset(mtcars,mpg>=23 & vs==1)
efficient
dim(efficient)
lt23<-mtcars[mtcars$mpg>=23,]
dim(lt23)
subset(mtcars, mpg < 14 | disp > 390)
subset(mtcars,qsec<=16.9)
lightCars<-subset(mtcars,(mtcars$wt*1000)<=2000)
dim(lightCars)
mtcars$year <- c(1974,2001)
dim(mtcars)
head(mtcars,4)
View(mtcars)
View(lt23)
View(mtcars)
mtcars<-subset(mtcars,select=-year)
dim(mtcars)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
rm(cond)
rm(mtcars)
rm(cond)
rm(mtcars)
rm(lt23)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages('knitr', dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("knitr", dependencies = T)
uninstall.packages('knitr', dependencies = T)
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("foreign", "survival"))
options(repos="https://cran.rstudio.com" )
install.packages("forecast", repos = "http://cran.us.r-project.org")
library("assertthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:assertthat", unload=TRUE)
library("assertthat", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("zoo", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("yaml", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
update.packages()
update.packages
install.packages(
lib  = lib <- .libPaths()[1],
pkgs = as.data.frame(installed.packages(lib), stringsAsFactors=FALSE)$Package,
type = 'source'
)
update.packages(ask = FALSE)
insatll.packages(rugarch,TRUE)
insatll.packages('rugarch')
install.packages('rugarch')
install.packages('dplyr')
install.packages('ggplot')
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages('ggplot2')
install.packages("ggplot2")
install.packages('knitr', dependencies = T)
install.packages("weatherData",repos = "http://cran.us.r-project.org")
make serve
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages('knitr', dependencies = T,repos="https://cran.rstudio.com")
library(knitr)
install.packages("knitr", dependencies = T, repos = "https://cran.rstudio.com")
install.packages('TexLive', repo = 'http://tug.org/mactex/')
install.packages('TexLive')
answer<-subset(mtcars,mpg>=30|hp<60)
dim(answer)
answer
mtcars[mtcars$mpg>=30|mtcars$hp<60,]
getwd()
setwd("/Users/henry/Desktop/Data Science/ud651_data_analysis_with_R/lesson2")
reddit<-read.csv('reddit.csv')
str(reddit)
dim(reddit)
head(reddit)
table(reddit$age.range)
levels(reddit$age.range)
reddit$age.range<-ordered(reddit$age.range,levels=c('Under 18','18-24',
'25-34','35-44','45-54',
'55-64','65 or Above'))
levels(reddit$age.range)
levels(reddit$age.range)
library(ggplot2)
qplot(data=reddit,x=age.range)
#generate numeric vector
state<-sample(0:1 ,20,replace=TRUE)
state
is.factor(state)
is.numeric(state)
#generate factor variable
state.f<-factor(state,labels=c("private","public"))
levels(state.f)
table(state.f)
#generate a character vector
status.rank <- c("low", "middle", "low", "low", "low", "low", "middle","low", "middle","middle", "middle", "middle", "middle",  "high", "high", "low", "middle","middle", "low", "high")
is.character((status.rank))
#use the levels argument to indicate the correct ordering of the categories
status.rank.f<-factor(status.rank,levels=c("low","middle","high"))
status.rank.f
levels(status.rank.f)
#add level
length(status.rank.f)
status.rank.f<-factor(status.rank.f,levels=c(levels(status.rank.f),"very.high"))
status.rank.f[21] <- "very.high"
status.rank.f
#generate numeric vector
state<-sample(0:1 ,20,replace=TRUE)
state
is.factor(state)
is.numeric(state)
#generate factor variable
state.f<-factor(state,labels=c("private","public"))
levels(state.f)
table(state.f)
#generate a character vector
status.rank <- c("low", "middle", "low", "low", "low", "low", "middle","low", "middle","middle", "middle", "middle", "middle",  "high", "high", "low", "middle","middle", "low", "high")
is.character(status.rank)
#use the levels argument to indicate the correct ordering of the categories
status.rank.f<-factor(status.rank,levels=c("low","middle","high"))
status.rank.f
levels(status.rank.f)
#generate numeric vector
state<-sample(0:1 ,20,replace=TRUE)
state
is.factor(state)
is.numeric(state)
#generate factor variable
state.f<-factor(state,labels=c("private","public"))
levels(state.f)
table(state.f)
#generate a character vector
status.rank <- c("low", "middle", "low", "low", "low", "low", "middle","low", "middle","middle", "middle", "middle", "middle",  "high", "high", "low", "middle","middle", "low", "high")
is.character(status.rank)
#use the levels argument to indicate the correct ordering of the categories
status.rank.f<-factor(status.rank,levels=c("low","middle","high"))
status.rank.f
is.character(status.rank.f)
levels(status.rank.f)
getwd()
list.files()
pf<-read.csv('pseudo_facebook.tsv',sep='\t')
dim(pf)
names(pf)
head(pf,5)
list
library(ggplot2)
names(pf)
summary(pf$dob_day)
qplot(x=dob_day,data=pf,binwidth=2)+
scale_x_continuous(breaks=1:31)
ggplot(aes(x = dob_day), data = pf) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = 1:31)
qplot(x=dob_day,data=pf,binwidth=1)+
scale_x_continuous(breaks=1:31)+
facet_wrap(~dob_month,ncol=4)
ggplot(aes(x = dob_day), data = pf) +
geom_histogram(binwidth = 1) +
scale_x_continuous(breaks = 1:31)+
facet_wrap(~dob_month,ncol=3)
str(pf)
ggplot(aes(x=friend_count),data=pf)+
geom_histogram(binwidth=100)
ggplot(aes(x=friend_count),data=pf)+
geom_histogram(binwidth=100)+
scale_x_continuous(limits=c(0,1000))
qplot(x=friend_count,data=pf,binwidth=1,xlim=c(0,1000))
qplot(x=friend_count,data=pf)+
scale_x_continuous(limits=c(0,1000))
