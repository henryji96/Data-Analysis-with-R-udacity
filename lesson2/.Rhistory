d<-c(1,2,3,4)
e<-c(TRUE,TRUE,TRUE,FALSE)
f<-c("blue","green","grey",NA)
mydf<-data.frame(d,e,f)
names(mydf)<-c("ID","Passes","Color") #variable names
d<-c(1,2,3,4)
e<-c(TRUE,TRUE,TRUE,FALSE)
f<-c("blue","green","grey",NA)
mydf<-data.frame(d,e,f)
names(mydf)<-c("ID","Passes","Color") #variable names
mydf
d<-c(1,2,3,4)
e<-c(TRUE,TRUE,TRUE,FALSE)
f<-c("blue","green","grey",NA)
mydf<-data.frame(d,e,f)
names(mydf)<-c("ID","Passes","Color") #variable names
mydf
mydf[3:5]
d<-c(1,2,3,4)
e<-c(TRUE,TRUE,TRUE,FALSE)
f<-c("blue","green","grey",NA)
mydf<-data.frame(d,e,f)
names(mydf)<-c("ID","Passes","Color") #variable names
mydf
mydf[2:4]
d<-c(1,2,3,4)
e<-c(TRUE,TRUE,TRUE,FALSE)
f<-c("blue","green","grey",NA)
mydf<-data.frame(d,e,f)
names(mydf)<-c("ID","Passes","Color") #variable names
mydf
mydf[1:2]
d<-c(1,2,3,4)
e<-c(TRUE,TRUE,TRUE,FALSE)
f<-c("blue","green","grey",NA)
mydf<-data.frame(d,e,f)
names(mydf)<-c("ID","Passes","Color") #variable names
mydf
mydf[1:2] #columns 1,2 of df
mydf[c("ID","Color")]#ID and Color column
d<-c(1,2,3,4)
e<-c(TRUE,TRUE,TRUE,FALSE)
f<-c("blue","green","grey",NA)
mydf<-data.frame(d,e,f)
names(mydf)<-c("ID","Passes","Color") #variable names
mydf
mydf[1:2] #columns 1,2 of df
mydf[c("ID","Color")]#ID and Color column
mydf$ID      #variable ID in the dataframe
d<-c(1,2,3,4)
e<-c(TRUE,TRUE,TRUE,FALSE)
f<-c("blue","green","grey",NA)
mydf<-data.frame(d,e,f)
names(mydf)<-c("ID","Passes","Color") #variable names
mydf
mydf[1:2] #columns 1,2 of df
mydf[c("ID","Color")]#ID and Color column
mydf$ID      #variable ID in the dataframe
row.names(mydf)
d<-c(1,2,3,4)
e<-c(TRUE,TRUE,TRUE,FALSE)
f<-c("blue","green","grey",NA)
mydf<-data.frame(d,e,f)
names(mydf)<-c("ID","Passes","Color") #variable names
mydf
mydf[1:2] #columns 1,2 of df
mydf[c("ID","Color")]#ID and Color column
mydf$ID      #variable ID in the dataframe
row.names(mydf)<-c("a","b","c","d")
mydf
w <- list(name="Fred", mynumbers=a, mymatrix=y, age=5.3)
w <- list(name="Fred", mynumbers=1, myframe=mydf, age=5.3)
# example of a list with 4 components -
# a string, a numeric vector, a dataframe, and a scaler
a<-c(1,2,3,4)
w <- list(name="Fred", mynumbers=a, myframe=mydf, age=5.3)
# example of a list with 4 components -
# a string, a numeric vector, a dataframe, and a scaler
a<-c(1,2,3,4)
list1 <- list(name="Fred", mynumbers=a, myframe=mydf, age=18)
# example of a list containing two lists
list2<-  list(name="Henry", mynumbers=a, myframe=mydf, age=21)
v<-c(list1,list2)
v
a<-c(3,1.1,2.2,-3) #numeric vector
b<-c("one","two","three")#character vector
c<-c(TRUE,FALSE,TRUE,FALSE)#logical vector
a[1:2]
b
c
# example of a list with 4 components -
# a string, a numeric vector, a dataframe, and a scaler
a<-c(1,2,3,4)
list1 <- list(name="Fred", mynumbers=a, myframe=mydf, age=18)
# example of a list containing two lists
list2<-  list(name="Henry", mynumbers=a, myframe=mydf, age=21)
v<-c(list1,list2)
v[1]
#
# example of a list with 4 components -
# a string, a numeric vector, a dataframe, and a scaler
a<-c(1,2,3,4)
list1 <- list(name="Fred", mynumbers=a, myframe=mydf, age=18)
# example of a list containing two lists
list2<-  list(name="Henry", mynumbers=a, myframe=mydf, age=21)
v<-c(list1,list2)
v[1:8]
#
# example of a list with 4 components -
# a string, a numeric vector, a dataframe, and a scaler
a<-c(1,2,3,4)
list1 <- list(name="Fred", mynumbers=a, myframe=mydf, age=18)
list1
#Identify elements of a list using the [[]] convention.
list1[[1]]
#Identify elements of a list using the [[]] convention
list1[[2]] # 2nd component of the list
list1[["mynumbers"]] # component named mynumbers in list
# variable gender with 20 "male" entries and
# 30 "female" entries
gender <- c(rep("male",20), rep("female", 30))
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
summary(gender)
# variable gender with 20 "male" entries and
# 30 "female" entries
gender <- c(rep("male",20), rep("female", 30))
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
str(gender)
# variable gender with 20 "male" entries and
# 30 "female" entries
c(rep("female", 5))
gender <- c(rep("male",20), rep("female", 30))
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
str(gender)
summary(gender)
# variable gender with 20 "male" entries and
# 30 "female" entries
c(rep("female", 3))
gender <- c(rep("male",20), rep("female", 30))
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
str(gender)
summary(gender)
# variable gender with 20 "male" entries and
# 30 "female" entries
c(rep("repeat", 3))
gender <- c(rep("male",20), rep("female", 30))
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
str(gender)
summary(gender)
# variable gender with 20 "male" entries and
# 30 "female" entries
c(rep("repeat", 3))
gender <- c(rep("male",20), rep("female", 30))
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
str(gender)
dim(gender)
summary(gender)
# variable gender with 20 "male" entries and
# 30 "female" entries
c(rep("repeat", 3))
gender <- c(rep("male",20), rep("female", 30))
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
str(gender)
summary(gender)
# variable gender with 20 "male" entries and
# 30 "female" entries
c(rep("repeat", 3))
gender <- c(rep("male",20), rep("female", 30))
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
str(gender)
summary(gender)
table(gender)
table(reddit$age.range)
summary(reddit)
# variable gender with 20 "male" entries and
# 30 "female" entries
c(rep("repeat", 3))
gender <- c(rep("male",20), rep("female", 30),"Unknown")
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
str(gender)
summary(gender)
table(gender)
# variable gender with 20 "male" entries and
# 30 "female" entries
c(rep("repeat", 3))
gender <- c(rep("male",20), rep("female", 30),"Unknown")
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
str(gender)
summary(gender)
table(gender)
levels(gender)
# variable gender with 20 "male" entries and
# 30 "female" entries
c(rep("repeat", 3))
gender <- c(rep("male",20), rep("female", 30),"Unknown")
gender <- factor(gender)
# stores gender as 20 1s and 30 2s and associates
# 1=female, 2=male internally (alphabetically)
# R now treats gender as a nominal variable
str(gender)
summary(gender)
rating<-c(rep("large",10),rep("small",3),rep("medium",5))
rating<-ordered(rating)
# recodes rating to 1,2,3 and associates
# 1=large, 2=medium, 3=small internally
# R now treats rating as ordinal
rating<-c(rep("large",10),rep("small",3),rep("medium",5))
rating<-ordered(rating,levels=c("small","medium","large"))
level(rating)
# recodes rating to 1,2,3 and associates
# 1=large, 2=medium, 3=small internally
# R now treats rating as ordinal
rating<-c(rep("large",10),rep("small",3),rep("medium",5))
rating<-ordered(rating,levels=c("small","medium","large"))
levels(rating)
# recodes rating to 1,2,3 and associates
# 1=large, 2=medium, 3=small internally
# R now treats rating as ordinal
rating<-c(rep("large",10),rep("small",3),rep("medium",5))
rating<-ordered(rating,levels=c("small","medium","large"))
table(rating)
levels(rating)
# recodes rating to 1,2,3 and associates
# 1=large, 2=medium, 3=small internally
# R now treats rating as ordinal
rating<-c(rep("large",10),rep("small",3),rep("medium",5))
table(rating)
rating<-ordered(rating,levels=c("small","medium","large"))
table(rating)
levels(rating)
length(rating)
length(rating)
str(rating)
class(rating)
# recodes rating to 1,3,5 and associates
# 5=large, 3=medium, 1=small internally
# R now treats rating as ordinal
rating<-c(rep("large",10),rep("small",3),rep("medium",5))
table(rating)
#map small to 1, medium to 3, large to 5
rating<-ordered(rating,levels=c("small","medium","large"),
labels=c(1,3,5))
table(rating)
levels(rating)
length(rating)
str(rating)
class(rating)
# recodes rating to 1,3,5 and associates
# 5=large, 3=medium, 1=small internally
# R now treats rating as ordinal
rating<-c(rep("large",10),rep("small",3),rep("medium",5))
table(rating)
#map small to 1, medium to 3, large to 5
rating<-ordered(rating,levels=c(1,3,5),
labels=c("small","medium","large"))
table(rating)
levels(rating)
# recodes rating to 1,3,5 and associates
# 5=large, 3=medium, 1=small internally
# R now treats rating as ordinal
rating<-c(rep("large",10),rep("small",3),rep("medium",5))
table(rating)
#map small to 1, medium to 3, large to 5
rating<-ordered(rating,levels=("small","medium","large"))
# recodes rating to 1,3,5 and associates
# 5=large, 3=medium, 1=small internally
# R now treats rating as ordinal
rating<-c(rep("large",10),rep("small",3),rep("medium",5))
table(rating)
#map small to 1, medium to 3, large to 5
rating<-ordered(rating,levels=c("small","medium","large"))
table(rating)
levels(rating)
length(rating)
str(rating)
class(rating)
length(rating)
str(rating)
class(rating)
names(rating)
length(rating)
str(rating)
class(rating)
names(rating)
cbind(1,2,3)
rbind(1,2,3)
length(rating)
str(rating)
class(rating)
names(rating)
cbind(1,2,3)
length(rating)
str(rating)
class(rating)
names(rating)
cbind(1,2)
length(rating)
str(rating)
class(rating)
names(rating)
ls()
length(rating)
str(rating)
class(rating)
names(rating)
ls()
rm(a) # delete an object
length(rating)
str(rating)
class(rating)
names(rating)
ls()
rm(a) # delete an object
length(rating) # number of elements or components
str(rating)    # structure of an object
class(rating)  # class or type of an object
names(rating)  # names
ls()# list current objects
rm(a) # delete an object
length(rating) # number of elements or components
str(rating)    # structure of an object
class(rating)  # class or type of an object
names(rating)  # names
ls()# list current objects
#rm(object) # delete an object
# generates 5 x 4 numeric matrix
y<-matrix(1:20, nrow=5,ncol=4)
y
# another example
cells <- c(1,26,24,68)
rnames <- c("R1", "R2")
cnames <- c("C1", "C2")
mymatrix <- matrix(cells, nrow=2, ncol=2, byrow=TRUE,
dimnames=list(rnames, cnames))
# generates 5 x 4 numeric matrix #fill by columns
y<-matrix(1:20, nrow=5,ncol=4)
y
# another example
cells <- c(1,26,24,68)
rnames <- c("R1", "R2")
cnames <- c("C1", "C2")
mymatrix <- matrix(cells, nrow=2, ncol=2, byrow=TRUE,
dimnames=list(rnames, cnames))
mymatrix
clear
rm
rm()
state<-sample(0:1,20)
state<-sample(0:1,20,replace=True)
state<-sample(0:1,20,replace=TRUE)
state
state<-sample(0:9,20,replace=TRUE)
state
state<-sample(0:1 ,20,replace=TRUE)
state
is.factor(state)
is.numeric(state)
state<-sample(0:1 ,20,replace=TRUE)
state
is.factor(state)
is.numeric(state)
state.f<-factor(numeric,labels=c("private","public"))
state<-sample(0:1 ,20,replace=TRUE)
state
is.factor(state)
is.numeric(state)
state.f<-factor(state,labels=c("private","public"))
state.f
is.factor(state.f)
#generate numeric vector
state<-sample(0:1 ,20,replace=TRUE)
state
is.factor(state)
is.numeric(state)
#generate factor variable
state.f<-factor(state,labels=c("private","public"))
state.f
is.factor(state.f)
#generate a character vector
status.rank <- c("low", "middle", "low", "low", "low", "low", "middle","low", "middle","middle", "middle", "middle", "middle",  "high", "high", "low", "middle","middle", "low", "high")
is.character((status.rank))
#generate numeric vector
state<-sample(0:1 ,20,replace=TRUE)
state
is.factor(state)
is.numeric(state)
#generate factor variable
state.f<-factor(state,labels=c("private","public"))
state.f
is.factor(state.f)
#generate a character vector
status.rank <- c("low", "middle", "low", "low", "low", "low", "middle","low", "middle","middle", "middle", "middle", "middle",  "high", "high", "low", "middle","middle", "low", "high")
is.character((status.rank))
#use the levels argument to indicate the correct ordering of the categories
status.rank.f<-factor(status.rank,levels=c("low","middle","high"))
levels(status.rank.f)
status.rank.o<-ordered(status.rank,levels=c("low","middle","high"))
status.rank.o<-ordered(status.rank,levels=c("low","middle","high"))
status.rank.o
#generate numeric vector
state<-sample(0:1 ,20,replace=TRUE)
state
is.factor(state)
is.numeric(state)
#generate factor variable
state.f<-factor(state,labels=c("private","public"))
state.f
is.factor(state.f)
#generate a character vector
status.rank <- c("low", "middle", "low", "low", "low", "low", "middle","low", "middle","middle", "middle", "middle", "middle",  "high", "high", "low", "middle","middle", "low", "high")
is.character((status.rank))
#use the levels argument to indicate the correct ordering of the categories
status.rank.f<-factor(status.rank,levels=c("low","middle","high"))
status.rank.f
levels(status.rank.f)
status.rank.f<-factor(status.rank.f,levels=c(levels(status.rank.f,"very high")))
status.rank.f<-factor(status.rank.f,levels=c(levels(status.rank.f),"very high"))
status.rank.f[20]
status.rank.f<-factor(status.rank.f,levels=c(levels(status.rank.f),"very high"))
status.rank.f[21]<-"very high"
length(status.rank.f)
status.rank.f<-factor(status.rank.f,levels=c(levels(status.rank.f),"very high"))
status.rank.f[21]<-"very high"
length(status.rank.f)
status.rank.f<-factor(status.rank.f,levels=c(levels(status.rank.f),"very high"))
status.rank.f[22]<-"very high"
length(status.rank.f)
status.rank.f<-factor(status.rank.f,levels=c(levels(status.rank.f),"very high"))
status.rank.f[22]<-"very high"
length(status.rank.f)
status.rank.f<-factor(status.rank.f,levels=c(levels(status.rank.f),"very high"))
status.rank.f
length(status.rank.f)
status.rank.f<-factor(status.rank.f,levels=c(levels(status.rank.f),"very.high"))
status.rank.f
#generate numeric vector
state<-sample(0:1 ,20,replace=TRUE)
state
is.factor(state)
is.numeric(state)
#generate factor variable
state.f<-factor(state,labels=c("private","public"))
state.f
is.factor(state.f)
#generate a character vector
status.rank <- c("low", "middle", "low", "low", "low", "low", "middle","low", "middle","middle", "middle", "middle", "middle",  "high", "high", "low", "middle","middle", "low", "high")
is.character((status.rank))
#use the levels argument to indicate the correct ordering of the categories
status.rank.f<-factor(status.rank,levels=c("low","middle","high"))
status.rank.f
levels(status.rank.f)
status.rank.o<-ordered(status.rank,levels=c("low","middle","high"))
status.rank.o
length(status.rank.f)
status.rank.f<-factor(status.rank.f,levels=c(levels(status.rank.f),"very.high"))
status.rank.f[21] <- "very.high"
status.rank.f
status.rank.f<-status.rank.f[status.rank.f!="very.high"]
status.rank.f
status.rank.f<-factor(status.rank.f)
status.rank.f
status.rank.f<-status.rank.f[status.rank.f!="very.high"]
status.rank.f
#drop the none exist level
status.rank.f<-factor(status.rank.f)
status.rank.f
#add level
length(status.rank.f)
status.rank.f<-factor(status.rank.f,levels=c(levels(status.rank.f),"very.high"))
status.rank.f[21] <- "very.high"
status.rank.f
status.rank.f<-status.rank.f[status.rank.f!="very.high"]
status.rank.f
#drop the none exist level
status.rank.f<-factor(status.rank.f)
status.rank.f
table(state.f,status.rank.f)
table(state.f)
table(state.f,status.rank.f)
table(state.f)
table(status.rank.f)
table(state.f,status.rank.f)
