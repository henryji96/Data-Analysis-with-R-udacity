ggplot(data=filter(pf,!is.na(pf$gender),tenure>1),
aes(x=gender,y=friend_count/tenure))+
geom_boxplot()+
coord_cartesian(ylim=c(0,4))
ggplot(data=filter(pf,tenure>=1),
aes(x=tenure,y=friendships_initiated/tenure))+
geom_line(aes(color=year_joined.bucket),stat='summary',fun.y=mean)
ggplot(aes(x = tenure,
y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
#The code changing the binning is substituting x = tenure in the plotting expressions with x = 7 * round(tenure / 7), etc., binning values by the denominator in the round function and then transforming back to the natural scale with the constant in front.
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 30 * round(tenure / 30), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 90 * round(tenure / 90), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = tenure,
y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1))+
geom_smooth(aes(color=year_joined.bucket))
#R will automatically choose the appropriate statistical methods based on our data.
ggplot(aes(x = tenure,
y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
#The code changing the binning is substituting x = tenure in the plotting expressions with x = 7 * round(tenure / 7), etc., binning values by the denominator in the round function and then transforming back to the natural scale with the constant in front.
#tenure n-distinct decrease, so after groupby and summary, the new dataset will have fewer data points.
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 30 * round(tenure / 30), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 90 * round(tenure / 90), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
sample.ids<-sample(levels(yo$id),8,replace = FALSE)
#Use the pch or shape parameter to specify the symbol when plotting points. Scroll down to 'Plotting Points' #We could
ggplot(data=filter(yo,id %in% sample.ids),
aes(x=time,y=price))+
facet_wrap(~id)+
geom_point(aes(size=all.purchase),pch=4)+
geom_line()
#facet_wrap---set the color
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
sample.ids<-sample(levels(yo$id),9,replace = FALSE)
#Use the pch or shape parameter to specify the symbol when plotting points. Scroll down to 'Plotting Points' #We could
ggplot(data=filter(yo,id %in% sample.ids),
aes(x=time,y=price))+
facet_wrap(~id)+
geom_point(aes(size=all.purchase),pch=4)+
geom_line()
#facet_wrap---set the color
nci <- read.table("nci.tsv",sep='\t')
colnames(nci) <- c(1:64)
names(nci)
nci <- read.table("nci.tsv",sep='\t')
colnames(nci) <- c(1:64)
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
names(nci)
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
names(nci)
str(nci)
aql <- melt(airquality) # [a]ir [q]uality [l]ong format
head(aql)
tail(aql)
#id var
#control the column names in our long-format data
aql<-melt(airquality,
id.vars = c('month','day'),
variable.name = 'climate_variable',
value.name = 'climate_value')
head(aql)
library(ggplot2)
library(reshape2)
names(airquality)<-tolower(names(airquality))
head(airquality)
aqw <- dcast(aql,
month + day~climate_variable,
value.var = 'climate_value')
head(aqw)
#long to wide
pf.fc_by_age_gender.wide<-
dcast(pf.fc_by_age,
age~gender,
value.var = 'fc_median')
head(pf.fc_by_age_gender.wide)
library(gridExtra)
age_male<-ggplot(data=pf.fc_by_age_gender.wide,
aes(x=age,y=male))+
geom_line()
age_female<-ggplot(data=pf.fc_by_age_gender.wide,
aes(x=age,y=female))+
geom_line()
grid.arrange(age_male,age_female,ncol=2)
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
ggplot(data=yo,
aes(x=price))+
geom_histogram(binwidth = 5,
fill='orange')+
scale_x_continuous(breaks=seq(0,80,5))
library(ggplot2)
library(dplyr)
yo<-read.csv('yogurt.csv')
yo$id<-factor(yo$id)
head(yo)
str(yo)
summary(yo)
names(yo)
ggplot(data=yo,
aes(x=price))+
geom_histogram(binwidth = 5,
fill='orange')+
scale_x_continuous(breaks=seq(0,80,5))
length(unique(yo$price))
yo<-mutate(yo,all.purchase=
strawberry+blueberry+
pina.colada+plain+mixed.berry)
summary(yo$all.purchase)
ggplot(data=yo,
aes(x=all.purchase))+
geom_histogram(binwidth = 1)
length(unique(yo$id))  #number of users
length(yo$id) #number of buying behavior
ggplot(data=yo,
aes(x=time,y=price))+
geom_jitter(alpha=1/5,shape=3,color='brown')
#The most common prices seem to be increasing over time.
#Lower prices may because buyers using coupons that bring down the prices.
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
sample.ids<-sample(levels(yo$id),9,replace = FALSE)
#Use the pch or shape parameter to specify the symbol when plotting points. Scroll down to 'Plotting Points' #We could
ggplot(data=filter(yo,id %in% sample.ids),
aes(x=time,y=price))+
facet_wrap(~id)+
geom_point(aes(size=all.purchase),pch=4)+
geom_line()
#facet_wrap---set the color
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
sample.ids<-sample(levels(yo$id),9,replace = FALSE)
#Use the pch or shape parameter to specify the symbol when plotting points. Scroll down to 'Plotting Points' #We could
ggplot(data=filter(yo,id %in% sample.ids),
aes(x=time,y=price))+
facet_wrap(~id)+
geom_point(aes(size=all.purchase),pch=1)+
geom_line(lty=2)
#facet_wrap---set the color
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
sample.ids<-sample(levels(yo$id),9,replace = FALSE)
#Use the pch or shape parameter to specify the symbol when plotting points. Scroll down to 'Plotting Points' #We could
ggplot(data=filter(yo,id %in% sample.ids),
aes(x=time,y=price)
col.lab='red')+
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
sample.ids<-sample(levels(yo$id),9,replace = FALSE)
#Use the pch or shape parameter to specify the symbol when plotting points. Scroll down to 'Plotting Points' #We could
ggplot(data=filter(yo,id %in% sample.ids),
aes(x=time,y=price),
col.lab='red')+
facet_wrap(~id)+
geom_point(aes(size=all.purchase),pch=1)+
geom_line(lty=2)
#facet_wrap---set the color
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
sample.ids<-sample(levels(yo$id),9,replace = FALSE)
#Use the pch or shape parameter to specify the symbol when plotting points. Scroll down to 'Plotting Points' #We could
ggplot(data=filter(yo,id %in% sample.ids),
aes(x=time,y=price),
col.main='red')+
facet_wrap(~id)+
geom_point(aes(size=all.purchase),pch=1)+
geom_line(lty=2)
#facet_wrap---set the color
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
sample.ids<-sample(levels(yo$id),9,replace = FALSE)
#Use the pch or shape parameter to specify the symbol when plotting points. Scroll down to 'Plotting Points' #We could
ggplot(data=filter(yo,id %in% sample.ids),
aes(x=time,y=price))+
facet_wrap(~id)+
geom_point(aes(size=all.purchase),pch=1)+
geom_line(lty=2,col='brown')
#facet_wrap---set the color
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
sample.ids<-sample(levels(yo$id),9,replace = FALSE)
#Use the pch or shape parameter to specify the symbol when plotting points. Scroll down to 'Plotting Points' #We could
ggplot(data=filter(yo,id %in% sample.ids),
aes(x=time,y=price))+
facet_wrap(~id)+
geom_point(aes(size=all.purchase),pch=1)+
geom_line(lty=2,col='brown',bg='pink')
#facet_wrap---set the color
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
sample.ids<-sample(levels(yo$id),9,replace = FALSE)
#Use the pch or shape parameter to specify the symbol when plotting points. Scroll down to 'Plotting Points' #We could
ggplot(data=filter(yo,id %in% sample.ids),
aes(x=time,y=price),bg='pink')+
facet_wrap(~id)+
geom_point(aes(size=all.purchase),pch=1)+
geom_line(lty=2,col='brown')
#facet_wrap---set the color
#set the seed for reproducible results
#This allows us to subset the data so we get all the purchases occasions for the households in the sample. Then, we create scatterplots of price vs. time and facet by the sample id.
set.seed(4230)
length(levels(yo$id))
sample.ids<-sample(levels(yo$id),9,replace = FALSE)
#Use the pch or shape parameter to specify the symbol when plotting points. Scroll down to 'Plotting Points' #We could
ggplot(data=filter(yo,id %in% sample.ids),
aes(x=time,y=price),bg='yellow')+
facet_wrap(~id)+
geom_point(aes(size=all.purchase),pch=1)+
geom_line(lty=2,col='brown')
#facet_wrap---set the color
#install.packages('GGally')
set.seed(1836)
library(GGally)
pf_sub<-pf[,c(2:15)]
nrow(pf_sub)
sample_user<-sample.int(nrow(pf_sub),1000)
ggpairs(pf_sub[sample_user,])
#install.packages('GGally')
set.seed(1836)
library(GGally)
pf_sub<-pf[,c(2:15)]
nrow(pf_sub)
sample_user<-sample.int(nrow(pf_sub),1000)
ggpairs(pf_sub[sample_user,],binwidth=1)
#install.packages('GGally')
set.seed(1836)
library(GGally)
pf_sub<-pf[,c(2:15)]
nrow(pf_sub)
sample_user<-sample.int(nrow(pf_sub),1000)
ggpairs(pf_sub[sample_user,])
names(nci)
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
names(nci)
str(nci)
head(nci)
summary(nci)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
library(ggplot2)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
library(ggplot2)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
tail(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
library(ggplot2)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
tail(nic.long.samp)
library(ggplot2)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
tail(nci.long.samp)
names(nci.long.samp) <- c("gene", "case", "value")
tail(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
library(ggplot2)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
dim(nci.long.samp)
names(nci.long.samp) <- c("gene", "case", "value")
tail(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
library(ggplot2)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
dim(nci.long.samp)
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
str(ggplot)
?ggplot
library(ggplot2)
library(reshape2)
#When melt matrix, the new dataframe turned into 3 columns.
# row column value.
nci.long.samp <- melt(as.matrix(nci[1:200,]))
dim(nci.long.samp)
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
library(ggplot2)
library(reshape2)
#When melt matrix, the new dataframe turned into 3 columns.
# row column value.
nci.long.samp <- melt(as.matrix(nci[1:200,]))
dim(nci.long.samp)
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
library(ggplot2)
library(reshape2)
#When melt matrix, the new dataframe turned into 3 columns.
# row column value.
nci.long.samp <- melt(as.matrix(nci[1:200,]))
dim(nci.long.samp)
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
ggplot(data=diamonds,
aes(x=carat,y=price))+
geom_point()
library(ggplot2)
library(dplyr)
ggplot(data=diamonds,
aes(x=carat,y=price))+
geom_point()
library(ggplot2)
library(dplyr)
ggplot(data=diamonds,
aes(x=carat,y=price))+
geom_point()+
xlim(0,quantile(diamonds$carat,0.98))
library(ggplot2)
library(dplyr)
ggplot(data=diamonds,
aes(x=carat,y=price))+
geom_point(alpha=1/5)+
xlim(0,quantile(diamonds$carat,0.98))+
ylim(0,quantile(diamonds$price,0.98))
library(ggplot2)
library(dplyr)
ggplot(data=diamonds,
aes(x=carat,y=price))+
geom_point(alpha=1/5)+
xlim(0,quantile(diamonds$carat,0.99))+
ylim(0,quantile(diamonds$price,0.99))
library(ggplot2)
library(dplyr)
ggplot(data=diamonds,
aes(x=carat,y=price))+
geom_point(alpha=1/5,fill='blue')+
xlim(0,quantile(diamonds$carat,0.99))+
ylim(0,quantile(diamonds$price,0.99))
library(ggplot2)
library(dplyr)
ggplot(data=diamonds,
aes(x=carat,y=price))+
geom_point(alpha=1/5,fill='blue',shape=21)+
xlim(0,quantile(diamonds$carat,0.99))+
ylim(0,quantile(diamonds$price,0.99))
library(ggplot2)
library(dplyr)
ggplot(data=diamonds,
aes(x=carat,y=price))+
geom_point(alpha=1/20,fill='blue',shape=21)+
xlim(0,quantile(diamonds$carat,0.99))+
ylim(0,quantile(diamonds$price,0.99))
library(ggplot2)
library(dplyr)
ggplot(data=diamonds,
aes(x=carat,y=price))+
geom_point(alpha=1/20,fill='brown',shape=21)+
xlim(0,quantile(diamonds$carat,0.99))+
ylim(0,quantile(diamonds$price,0.99))+
geom_smooth()
library(ggplot2)
library(dplyr)
ggplot(data=diamonds,
aes(x=carat,y=price))+
geom_point(alpha=1/20,fill='brown',shape=21)+
xlim(0,quantile(diamonds$carat,0.99))+
ylim(0,quantile(diamonds$price,0.99))+
geom_smooth(method='lm')
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
# install these if necessary
#install.packages('GGally')
#install.packages('scales')
#install.packages('memisc')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
# install these if necessary
#install.packages('GGally')
#install.packages('scales')
#install.packages('memisc')
#install.packages('lattice')
#install.packages('MASS')
#install.packages('car')
#install.packages('reshape')
#install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
